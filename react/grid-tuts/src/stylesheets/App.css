/* #grid {
    display: grid; */


/* FIXED WIDTH 
    grid-template-columns: [start col-a] 200px [col-b] 50% [col-c] 100px [stop end last];
    grid-template-rows: [start masthead] 3em [content] 80% [footer] 2em [stop end];
    --alternative create content row track to fill space 
    grid-template-rows: [start masthead] 3em [content] minmax(3em, 100%) [footer] 2em [stop end]
    --alternative
    grid-template-rows: [start masthead] 3em [content] calc(100%-5em) [footer] 2em [stop end]
    */


/* FLEXIBLE WIDTH */


/* grid-template-columns: 25% 25% 25% 25%;
    grid-template-columns: 1fr 1fr 1fr 1fr 1fr;
    /* equal size columns */


/* grid-template-columns: 1fr 2fr 1fr; */


/* middle column twice as large as beg \ end column */


/* grid-template-columns: 15em 1fr 10%; */


/* fixed width columns are assigned first leaving the rest to fractional units */


/* grid-template-columns: 15em 4.5fr 3fr 10%; */


/* fixed width columns are assigned first leaving the rest to two fractional unit columns*/


/* grid-template-columns: 15em 4.5fr minmax(5em, 3fr), 10%; */


/* minmax is super useful here ! */


/* grid-template-columns: 15em 1fr minmax(0, 500px) 10%; */


/* 2nd and 3rd gridlines are in the same place -- 1fr is 0 px */


/* grid-template-rows: 3em minmax(5em, 1fr) 2em; */


/* 3em and 2em are assigned first with any space taken up in the middle down to 5em */


/* } */


/* #gallery { */


/* display: grid; */


/* will create each column fitting to the size of largest content in column / row */


/* grid-template-columns: max-content max-content max-content max-content; */


/* grid-template-rows: max-content max-content max-content max-content; */


/* } */


/* #g1 { */


/* display: grid; */


/* grid items will spill out of the grid w/o minmax */


/* grid-template-columns: max-content max-content max-content max-content; */


/* forces the items to fitwithin the confines of the set grid if possible */


/* grid-template-columns: minmax(0, max-content) minmax(0, max-content minmax(0, max-content) minmax(0, max-content)); */


/* auto -- treated as the minimum size for the grid item as defined by min-width or min-height -- as max treated the same as max-content*/


/* grid-template-columns: auto auto auto auto; */


/* best to generally avoid such syntax -- but IS USEFUL FOR TRACK-SIZING VALUES */


/**/


/* } */


/* #gridrepeat { */


/* display: grid; */


/* repeat 5em grid lines 10 times */


/* grid-template-columns: repeat(10, 5em); */


/* repeat entire patterns to create 2em 1fr 1fr 2em 1fr 1fr 2em 1fr 1fr */


/* grid-template-columns: repeat(3, 2em 1fr 1fr); */


/* to make the grid symmetrical with 2em at both ends */


/* grid-template-columns: repeat(3, 2em 2fr 2fr) 2em; */


/* you can even name columns using repeat */


/* grid-template-columns: repeat(4, 10px [col-start] 250px [col-end]) 10px; */


/* if you repeat named lines and place them next to eachother, they'll be merged into a single, double named grid line */


/* the following declarations are equivalent */


/* grid-template-rows: repeat(3, [top] 5em [bottom]); */


/* grid-template-rows: [top] 5em [bottom top] 5em [top bottom] 5em [bottom]; */


/* have pattern repeat as many times as grid-container can comfortably accept */


/* the following patterns are equivalent for a grid 11 ems tall */


/* grid-template-rows: repeat(auto-fill, [top] 5em [bottom]); */


/* grid-template-rows: [top] 5em [bottom top] 5em [b ottom]; */


/* if grid is increased to 15 ems then the following is equivalent */


/* grid-template-rows: [top] 5em [bottom top] 5em [top bottom] 5em [bottom]; */


/* auto-fill LIMITATION IS THAT IT CAN ONLY ACCEPT THE FOLLOWING PATTERN [top grin line ] size [bottom grid line ]
  /* auto-fill can only be used once in a given track template */


/* however you can use auto-fill with other repeat statements containing fixed width columns */


/* grid-template-rows: repeat(3, 20em) repeat(auto-fill, 2em); */


/* grid-template-rows: repeat(auto-fill, 2em), repeat(3, 20em); */


/* auto-fill will keep all rows even if they do not have content -- this is when to use auto-fit to drop columns */


/* grid-template-columns: repeat(auto-fit, 20em); */


/* } */


/* #gridareas { */


/* display: grid; */


/* grid-template-areas: "h h h h" "l c c r" "l f f f"; */


/* . will define DMZ in the grid layout */


/* grid-template-areas: "h h h h" "l . . right" "f f f f"; */


/* } */


/* #sizinggridareas { */


/* display: grid; */


/* grid-template-areas: "h h h h" "l . . r" "f f f f"; */


/* grid-template-columns: 1fr 20em 20em 1fr; */


/* grid-template-rows: 40px 10em 3em; */


/* if we add more grid-template-columns or grid-template-rows values tahn in the grid it will simply add no-named containers to the grid */


/* } */


/* 
#attachitemsgrid {
  display: grid;
  width: 50em;
  grid-template-rows: repeat(5, 5em);
  grid-template-columns: repeat(10, 5em);
}

.one {
  grid-row-start: 1;
  grid-row-end: 4;
  grid-column-start: 2;
  grid-column-end: 4;
  background-color: red;
}

.two {
  grid-row-start: 1;
  grid-row-end: 3;
  grid-column-start: 5;
  grid-column-end: 10;
  background-color: blue;
}

.three {
  grid-row-start: 4;
  grid-column-start: 6;
  background-color: purple;
}

.four {
  grid-row-start: 3;
  grid-row-end: span 1;
  grid-column-start: 7;
  grid-column-end: span 1;
  background-color: lightblue;
}

.five {
  grid-row-start: span 2;
  grid-row-end: 6;
  grid-column-start: span 1;
  grid-column-end: 6;
  background-color: lightgrey;
} */


/* #attachitemsgrid {
  display: grid;
  grid-template-rows: repeat(5, [R] 4em);
  grid-template-columns: 2em repeat(5, [col-A] 5em [col-B] 5em) 2em;
}

.one {
  grid-row-start: R 2;
  grid-row-end: 5;
  grid-column-start: col-B;
  grid-column-end: span 2;
  background-color: blue;
}

.two {
  grid-row-start: R;
  grid-row-end: span R 2;
  grid-column-start: col-A 3;
  grid-column-end: span 2 col-A;
  background-color: black;
}

.three {
  grid-row-start: -2;
  grid-column-start: col-A -1;
  background-color: orange;
} */


/* setting grid area and assigning values to it */


/* #attachitemsgrid {
  display: grid;
  width: 1000px;
  height: 1000px;
  grid-template-areas: "h h h h" "l c c r" "l f f f";
}

.one {
  grid-row-start: h;
  grid-column-start: h;
  grid-column-end: h;
  grid-row-end: h;
  background-color: red;
}

.two {
  grid-row-start: c;
  grid-row-end: c;
  grid-column-start: c;
  grid-column-end: c;
  background-color: blue;
}

.three {
  grid-row-start: l;
  grid-row-end: l;
  grid-column-start: l;
  grid-column-end: l;
  background-color: green;
}

.four {
  grid-row-start: f;
  grid-row-end: f;
  grid-column-start: f;
  grid-column-end: f;
  background-color: purple;
}

.five {
  grid-column-start: r;
  grid-column-end: r;
  grid-row-start: r;
  grid-row-end: r;
  background-color: yellow;
} */


/* using grid-row & grid-column shorthand expressions */


/* #attachitemsgrid {
    display: grid;
    width: 100vw;
    height: 100vh;
    grid-template-areas: "h h h h" "l c c r" "l f f f";
}

.one {
    grid-row: h;
    grid-column: h;
    background-color: blue;
}

.two {
    grid-row: f;
    grid-column: f;
    background-color: green;
}

.three {
    grid-row: l;
    grid-column: l;
    background-color: pink;
}

.four {
    grid-row: r;
    grid-column: r;
    background-color: purple;
}

.five {
    grid-row: c;
    grid-columns: c;
    background-color: yellow;
} */


/* IMPLICIT GRID AREAS */


/* #attachitemsgrid {
  display: grid;
  height: 100vh;
  width: 100wh;
  grid-template-rows: repeat(2, 2em);
  grid-template-columns: repeat(6, 4em);
  grid-auto-rows: 5em;
}

.one {
  grid-column: 1;
  grid-row: 1/ 3;
  background-color: red;
  box-shadow: 0px 0px 5px 2px #888888;
}

.two {
  grid-column: 2;
  grid-row: 3 / span 2;
  background-color: purple;
  box-shadow: 0px 0px 10px #888888;
}

.three {
  grid-column: 3;
  grid-row: span 2 / 3;
  background-color: blue;
  box-shadow: 0px 0px 7.5px #888888;
}

.four {
  grid-column: 4;
  grid-row: span 2 / 5;
  background-color: pink;
  box-shadow: 0px 0px 7.5px #888888;
}

.five {
  grid-column: 5;
  grid-row: span 4 / 5;
  background-color: aqua;
  box-shadow: 0px 0px 10px red;
}

.six {
  grid-column: 6;
  grid-row: -1 / span 3;
  background-color: yellow;
  box-shadow: 3px 3px 3px #888888;
}

.seven {
  grid-column: 7;
  grid-row: span 3 / -1;
  background-color: magenta;
  box-shadow: 0px 0px 20px #888888;
} */


/* IMPLICIT GRID AREAS WITH GRID LINE NAMES */


/* #attachitemsgrid {
    display: grid;
    height: 100vh;
    width: 100vw;
    grid-template-rows: [begin] 2em [middle] 2em [end];
    grid-template-columns: repeat(5, 5em);
    grid-auto-rows: 2em;
}

.one {
    grid-column: 1;
    grid-row: 2 / span end 2;
    box-shadow: 0px 0px 0px 20px red inset;
}

.two {
    grid-column: 2;
    grid-row: 2 / span final;
    box-shadow: 0px 0px 0px 20px orange inset;
}

.three {
    grid-column: 3;
    grid-row: 1 / span 3 middle;
    background-color: white;
    box-shadow: 0px 0px 0px 20px gold inset;
}

.four {
    grid-column: 4;
    grid-row: span begin 2 / end;
    box-shadow: 0px 0px 0px 20px green inset;
}

.five {
    grid-column: 5;
    grid-row: span 2 middle / begin;
    box-shadow: 0px 0px 0px 20px blue inset;
} */


/* grid areas */


/* #attachitemsgrid {
  display: grid;
  height: 100vh;
  width: 100wh;
  grid-template-areas: "h h h h" "l c c r" "l f f f";
  grid-template-rows: 200px 1fr 200px;
  grid-template-columns: 20em 1fr 1fr 10em;
}

.one {
  grid-area: h;
  box-shadow: 0px 0px 0px 20px red inset;
}

.two {
  grid-area: l;
  box-shadow: 0px 0px 0px 20px orange inset;
}

.three {
  grid-area: c;
  box-shadow: 0px 0px 0px 20px yellow inset;
}

.four {
  grid-area: r;
  box-shadow: 0px 0px 0px 20px green inset;
}

.five {
  grid-area: f;
  box-shadow: 0px 0px 0px 20px blue inset;
} */


/* grid areas using grid liens */


/* #attachitemsgrid {
    display: grid;
    height: 100vh;
    width: 100wh;
    grid-template-rows: [r1-start] 1fr [r1-end r2-start] 2fr [r2-end];
    grid-template-columns: [col-start] 1fr [col-end main-start] 1fr [main-end];
}

.one {
    grid-area: r1 / main / r1 / main;
    box-shadow: 0px 0px 0px 20px red inset;
}

.two {
    grid-area: r2-start / col-start / r2-end / main-end;
    box-shadow: 0px 0px 0px 20px blue inset;
}

.three {
    grid-area: r1-start / col-start / r1-end / col-end;
    box-shadow: 0px 0px 0px 20px rgb(0, 88, 0) inset;
} */


/* GRID ITEM OVERLAP */


/* #attachitemsgrid {
  display: grid;
  height: 100vh;
  width: 100vw;
  grid-template-rows: 1fr 1fr;
  grid-template-columns: 1fr 1fr;
}

.one {
  grid-area: 1 / 1 / 2 / 3;
  background-color: pink;
}

.two {
  grid-area: 1 / 2 / 3 / 2;
  box-shadow: 0px 0px 0px 20px yellow inset;
} */


/* GRID FLOW */


/* #attachitemsgrid {
  display: grid;
  grid-auto-flow: row dense;
  width: 100%;
  grid-template-columns: repeat(4, 50px);
  grid-template-rows: repeat(3, 50px);
}

.one {
  height: 50px;
  width: 50px;
  grid-row: auto;
  grid-column: auto;
  background-color: green;
}

.two {
  height: 50px;
  width: 50px;
  grid-row: auto;
  grid-column: auto;
  background-color: red;
}

.three {
  height: 50px;
  width: 50px;
  background-color: blue;
}

.four {
  height: 150px;
  width: 150px;
  grid-row: auto;
  grid-column: auto;
  background-color: yellow;
}

.five {
  height: 50px;
  width: 50px;
  grid-row: auto;
  grid-column: auto;
  background-color: purple;
}

.six {
  height: 50px;
  width: 50px;
  background-color: orange;
}

.seven {
  height: 50px;
  width: 50px;
  grid-row: auto;
  grid-column: auto;
  background-color: skyblue;
} */


/* automatic grid lines */


/* #attachitemsgrid {
    display: grid;
    grid-template-rows: 80px 80px;
    grid-template-columns: 80px 80px;
    grid-auto-rows: 80px;
    grid-auto-columns: 80px;
    grid-auto-flow: row;
}

#attachitemsgrid>* {
    background-color: red;
} */


/* grid shorthand  -- creating grids */


/* basic grid with sizing of columns and rows */


/* #attachitemsgrid {
    grid: "h h h h" 3em ". content sidebar ." 1fr "f f f f" 5em / 2em 3fr minmax(10em, 1fr) 2em;
} */


/* is equivalent to . . . */


/* #attachitemsgrid {
    grid-template-rows: 3em 1fr 5em;
    grid-template-columns: 2em 3fr minmax(10em, 1fr) 2em;
    grid-template-areas: "h h h h" ". content sidebar ." "f f f f"
} */


/* grid automatically resets grid variables to default  */


/* the following are the same */


/* #attachitemsgrid {
    display: grid;
    grid: 3em 1fr 5em / 2em 3fr minmax(10em, 1fr) 2em;
}

#attachitemsgrid {
    display: grid;
    grid: 3em 1fr 5em / 2em 3fr minmax(10em, 1fr) 2em;
    grid-auto-rows: auto;
    grid-auto-columns: auto;
    grid-auto-flow: row;
} */


/* the grid shorthand sets all variables to default -- so declare any 
options after declaring the grid variable  as below with dense*/


/* #attachitemsgrid {
    display: grid;
    grid: " h h h h" 3em [main-start] ". content sidebar ." 1fr [main-stop] "f f f f" 5em [page-end] / 2em 3fr minmax(10em, 1fr) 2em;
    grid-auto-flow: dense column;
} */


/* grid areas and named grid lines -- grid line before string is above to to the left
 a grid like after the string is below or to the left */


/* #attachitemsgrid {
    display: grid;
    grid: "h h h h" 3em [main-start] ". content sidebar ." 1fr [main-stop] "f f f f" 5em [page-end] / 2em 3fr minmax(10em, 1fr) 2em;
} */


/* using grid-auto-flow to merge grid-auto-rows with the grid shorthand -- the following are equivalent*/


/* #attachitemsgrid {
    grid-auto-flow: dense rows;
    grid-auto-rows: 2em;
    grid-auto-columns: minmax(1em, 3em)
}

#attachitemsgrid {
    grid: dense rows 2em / minmax(1em, 3em)
} */


/* SUBGRIDS -- AT RISK FEATURE -- THIS IS WHY IT IS NOT COMPREHENSIVE */


/* #attachitemsgrid {
    display: grid;
    grid: repeat(auto-fill, 2em) / repeat(10, 1% 8% 1%)
}

.one {
    display: grid;
    grid: subgrid;
    background-color: red;
}

.two {
    display: grid;
    grid: subgrid;
    background-color: blue;
}
 */


/* GRID GUTTERS | ABSOLUTE POSITIONING |  */


/* #attachitemsgrid {
    display: grid;
    grid-template-areas: "h h r r" "c c v v" "m m o o";
    grid-auto-flow: column;
    height: 100vh;
    width: 100wh;
    grid-gap: 1fr;
} */


/* #attachitemsgrid { */


/* display: grid; */


/* grid-template-rows: repeat(2, 100px); */


/* grid-template-columns: repeat(2, 200px); */


/* } */


/* .one { */


/* grid-area: h; */


/* background-color: blue; */


/* margin: 25px; */


/* padding: 25px; */


/* } */


/* .two {
    grid-area: m;
    background-color: red;
    grid-row: 2 / 4;
    grid-column: 2 / 5;
    position: absolute;
    top: 1em;
    bottom: 15%;
    left: 35px;
    right: 1rem;
} */


/* .two { */


/* grid-row: 1 / auto; */


/* grid-column: 2 / auto; */


/* position: absolute; */


/* top: 1em; */


/* bottom: 15%; */


/* left: 35px; */


/* right: 1rem; */


/* background-color: red; */


/* } */


/* .three { */


/* grid-area: c; */


/* background-color: purple; */


/* } */


/* .four { */


/* grid-area: v; */


/* background-color: yellow; */


/* } */


/* .five { */


/* grid-area: r; */


/* background-color: magenta; */


/* } */


/* .six { */


/* grid-area: o; */


/* background-color: aqua; */


/* } */


/* ALIGNING & GRIDS */


/*
justify-self    a grid item in the inline direction     grid items
justify-items   all grid items in the inline direction  grid container
justify-content the entire grid in the inline direciton grid container
align-self      a grid item in the block direction      grid items
align-items     all grid items in the block direction   grid container
align-content   the tnrie grid in the block direction   grid container
*/

#attachitemsgrid {
    display: grid;
    grid-template-areas: "hl hl hr hr" "ml ml mr mr" "fl fl fr fr";
    height: 100vh;
    width: 100wh;
    justify-items: center;
    align-items: start;
}

.one {
    background-color: red;
    grid-area: hl;
    height: 50px;
    width: 50px;
}

.two {
    background-color: blue;
    grid-area: hr;
    align-self: last-baseline;
}

.three {
    background-color: purple;
    grid-area: ml;
}

.four {
    background-color: pink;
    grid-area: fl;
}